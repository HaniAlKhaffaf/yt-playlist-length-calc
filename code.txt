package main

import (
	"context"
	"fmt"
	"log"
	"os"

	"github.com/gofiber/fiber/v2"
	"github.com/gofiber/fiber/v2/middleware/cors"
	"github.com/gofiber/fiber/v2/middleware/logger"
	"google.golang.org/api/option"
	"google.golang.org/api/youtube/v3"
)

type APITestResponse struct {
	Success     bool         `json:"success"`
	Message     string       `json:"message"`
	ChannelInfo *ChannelInfo `json:"channelInfo,omitempty"`
}

type ChannelInfo struct {
	Title           string `json:"title"`
	Description     string `json:"description"`
	SubscriberCount string `json:"subscriberCount"`
	VideoCount      string `json:"videoCount"`
}

func main() {
	// Check if API key is set
	apiKey := os.Getenv("YOUTUBE_API_KEY")
	if apiKey == "" {
		log.Fatal("YOUTUBE_API_KEY environment variable is not set")
	}

	// Create Fiber app
	app := fiber.New(fiber.Config{
		ErrorHandler: func(c *fiber.Ctx, err error) error {
			code := fiber.StatusInternalServerError
			if e, ok := err.(*fiber.Error); ok {
				code = e.Code
			}
			return c.Status(code).JSON(fiber.Map{
				"error":   true,
				"message": err.Error(),
			})
		},
	})

	// Middleware
	app.Use(logger.New())
	app.Use(cors.New(cors.Config{
		AllowOrigins: "*",
		AllowMethods: "GET,POST,PUT,DELETE,OPTIONS",
		AllowHeaders: "Content-Type, Authorization",
	}))

	// Routes
	app.Get("/health", healthCheck)
	app.Get("/api/test", testYouTubeAPI)

	fmt.Println("üöÄ Server starting on :8080")
	fmt.Println("üìç Test endpoint: http://localhost:8080/api/test")
	fmt.Println("‚ù§Ô∏è  Health check: http://localhost:8080/health")

	log.Fatal(app.Listen(":8080"))
}

func healthCheck(c *fiber.Ctx) error {
	return c.JSON(fiber.Map{
		"status":  "ok",
		"message": "YouTube API Test Server is running!",
	})
}

func testYouTubeAPI(c *fiber.Ctx) error {
	ctx := context.Background()
	apiKey := os.Getenv("YOUTUBE_API_KEY")

	// Create YouTube service
	service, err := youtube.NewService(ctx, option.WithAPIKey(apiKey))
	if err != nil {
		log.Printf("Error creating YouTube service: %v", err)
		return c.Status(fiber.StatusInternalServerError).JSON(APITestResponse{
			Success: false,
			Message: fmt.Sprintf("Failed to create YouTube service: %v", err),
		})
	}

	// Test API by getting info about YouTube's official channel
	channelID := "UC_x5XG1OV2P6uZZ5FSM9Ttw"

	call := service.Channels.List([]string{"snippet", "statistics"}).Id(channelID)
	response, err := call.Do()
	if err != nil {
		log.Printf("Error calling YouTube API: %v", err)
		return c.Status(fiber.StatusInternalServerError).JSON(APITestResponse{
			Success: false,
			Message: fmt.Sprintf("YouTube API call failed: %v", err),
		})
	}

	if len(response.Items) == 0 {
		return c.Status(fiber.StatusNotFound).JSON(APITestResponse{
			Success: false,
			Message: "No channel data returned from YouTube API",
		})
	}

	// Extract channel info
	channel := response.Items[0]

	return c.JSON(APITestResponse{
		Success: true,
		Message: "üéâ Successfully connected to YouTube Data API v3!",
		ChannelInfo: &ChannelInfo{
			Title:           channel.Snippet.Title,
			Description:     truncateString(channel.Snippet.Description, 100),
			SubscriberCount: fmt.Sprintf("%d", channel.Statistics.SubscriberCount),
			VideoCount:      fmt.Sprintf("%d", channel.Statistics.VideoCount),
		},
	})
}

func truncateString(s string, maxLen int) string {
	if len(s) <= maxLen {
		return s
	}
	return s[:maxLen] + "..."
}
